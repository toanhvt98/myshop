"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from email.policy import default
from pathlib import Path
from datetime import timedelta
from decouple import config, Csv
from .utils import string_to_timedelta
from kombu import Queue, Exchange
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY',default='django-insecure-byxv8zv4(b58z82(oxui0jhp@8c$bl40e1a$xbggu1k252pkh-')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool, default=True)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv(), default=['localhost'])

ALLOWED_ORIGINS = config('ALLOWED_ORIGINS', cast=Csv(), default=['http://localhost:3000'])

CORS_ALLOWED_ORIGINS = ALLOWED_ORIGINS
CORS_ALLOW_CREDENTIALS = True

# Application definition

INTERNAL_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

EXTERNAL_APPS = [
    'rest_framework',
    'corsheaders',
    'drf_standardized_errors',
    'simple_history',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'channels',
    'django_celery_beat',
    'django_celery_results',
    'encrypted_model_fields',
]

MY_APPS = [
    'base',
    'user_app'
]
INSTALLED_APPS = INTERNAL_APPS + EXTERNAL_APPS + MY_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'base.middleware.HandleMETAMiddleware',
]

ROOT_URLCONF = 'backend.urls'

STATIC_URL = '/static/'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
    }
}

# Cache
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{config('REDIS_HOST')}:{config('REDIS_PORT')}/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
        },
    },
    'user_app': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"redis://{config('REDIS_HOST')}:{config('REDIS_PORT')}/1",
        'OPTIONS':{
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
            'prefix':'user_app_cache:',
        }
    }
}

# Celery

CELERY_BROKER_URL = f'amqp://{config('RABBITMQ_DEFAULT_USER')}:{config('RABBITMQ_DEFAULT_PASS')}@{config('RABBITMQ_HOST')}:5672/myvhost'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Ho_Chi_Minh'
CELERY_ENABLE_UTC = True

# CELERY_TASK_QUEUES = (
#     Queue('default', Exchange('default'), routing_key='default'),
#     Queue('user_app', Exchange('user_app'), routing_key='user_app'),
#
# )

# Authentication backends
AUTHENTICATION_BACKENDS =[
    'base.backends.CustomBackend',
]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'vi'

TIME_ZONE = 'Asia/Bangkok'

USE_I18N = True
USE_L10N = True
USE_TZ = True

LANGUAGES = [
    ('en', 'English'),
    ('vi', 'Vietnamese'),
]
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

LANGUAGE_COOKIE_NAME = config('LANGUAGE_COOKIE_NAME',cast=str, default='i18next')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'user_app.User'

REST_FRAMEWORK = {
    "EXCEPTION_HANDLER": "drf_standardized_errors.handler.exception_handler"
}

REFRESH_TOKEN_LIFETIME = config('REFRESH_TOKEN_LIFETIME', cast=str, default='7/days')
ACCESS_TOKEN_LIFETIME = config('ACCESS_TOKEN_LIFETIME', cast=str, default='10/minutes')
ACCESS_TOKEN_NAME = config('ACCESS_TOKEN_NAME', cast=str, default='access_token')
REFRESH_TOKEN_NAME = config('REFRESH_TOKEN_NAME', cast=str, default='refresh_token')


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": string_to_timedelta(ACCESS_TOKEN_LIFETIME),
    "REFRESH_TOKEN_LIFETIME": string_to_timedelta(REFRESH_TOKEN_LIFETIME),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",


    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",

}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'), # Đường dẫn đến file log
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5, # Giữ 5 file log cũ
            'formatter': 'verbose',
        },
        'celery_file': { # Handler riêng cho Celery
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'celery.log'), # Đường dẫn đến file log Celery
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': { # Log của Django
            'handlers': ['console', 'file'],
            'level': 'INFO', # Thay đổi thành 'DEBUG' để xem nhiều hơn
            'propagate': False,
        },
        'user_app': { # Log của ứng dụng của bạn (ví dụ: 'user_app')
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': { # Log của Celery framework
            'handlers': ['celery_file'],
            'level': 'DEBUG', # Celery có thể cần level DEBUG để thấy chi tiết task
            'propagate': False,
        },
        'celery.task': { # Log cụ thể cho các task của Celery
            'handlers': ['celery_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        '': { # Logger gốc (fallback)
            'handlers': ['console', 'file'],
            'level': 'WARNING',
        },
    },
}


#
FIELD_ENCRYPTION_KEY=config('FIELD_ENCRYPTION_KEY', default='l5EbKJFENaCBt5hV7P7Fr3OdFhZOOSxhJrWlyUpf1xE=')

# SITE
SITE_NAME = config('SITE_NAME', default='My Shop')
MIN_LENGTH_PASSWORD= config('MIN_LENGTH_PASSWORD', cast=int, default=8)
COOKIE_DOMAIN = config('COOKIE_DOMAIN', default='localhost')
COOKIE_HTTP_ONLY=config('COOKIE_HTTP_ONLY', cast=bool, default=True)
COOKIE_SECURE=config('COOKIE_SECURE', cast=bool, default=False)
COOKIE_SAME_SITE=config('COOKIE_SAME_SITE', cast=str, default='Lax')
COOKIE_PATH=config('COOKIE_PATH', default='/')

# FRONTEND_URL
FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3031')
RESET_PASSWORD_URL = config('RESET_PASSWORD_URL', default=f'{FRONTEND_URL}/reset-password')

# EMAIL CONFIG
EMAIL_BACKEND =config('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST=config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT=config('EMAIL_PORT', cast=int, default=587)
EMAIL_USE_TLS=config('EMAIL_USE_TLS', cast=bool, default=True)
EMAIL_HOST_USER=config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD=os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL=f'{SITE_NAME} <{EMAIL_HOST_USER}>'

# AUTH CONFIG
LOCKING_ACCOUNT_ON_OTP_LIMIT=config('LOCKING_ACCOUNT_ON_OTP_LIMIT', cast=bool, default=False)
OTP_LIMIT_EXCEEDED_ACTION = config('OTP_LIMIT_EXCEEDED_ACTION', cast=str, default='DEACTIVATE')

MAX_OTP_ATTEMPTS_THRESHOLD = config('MAX_OTP_ATTEMPTS_THRESHOLD', cast=int, default=5)
OTP_ATTEMPT_WINDOW_LIFETIME = config('OTP_ATTEMPT_WINDOW_LIFETIME', cast=str, default='5|minutes')

MAX_TOTP_ATTEMPTS_THRESHOLD = config('MAX_TOTP_ATTEMPTS_THRESHOLD', cast=int, default=5)
TOTP_ATTEMPT_WINDOW_LIFETIME = config('TOTP_ATTEMPT_WINDOW_LIFETIME', cast=str, default='5|minutes')

LOCKING_ACCOUNT_LIFETIME = config('LOCKING_ACCOUNT_IN_SECONDS', cast=str, default='10|minutes')

OTP_EXPIRES_LIFETIME = config('OTP_EXPIRES_LIFETIME', cast=str, default='30|minutes')
OTP_RENEW_WINDOW_LIFETIME = config('OTP_RENEW_WINDOW_LIFETIME', cast=str, default='5|minutes')
OTP_LENGTH = config('OTP_LENGTH', cast=int, default=6)
TOTP_DIGITS= config('TOTP_DIGITS', cast=int, default=6)
OTP_MIXED_CASE = config('OTP_MIXED_CASE', cast=bool, default=False)

# TOKEN CONFIG
ENABLE_ROTATE_REFRESH_TOKEN= config('ENABLE_ROTATE_REFRESH_TOKEN', cast=bool, default=True)
GET_NEW_REFRESH_TOKEN_WHILE_BELOW_IN=config('GET_NEW_REFRESH_TOKEN_WHILE_BELOW_IN', cast=str, default='30/minutes')